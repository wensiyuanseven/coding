分辨率与像素的关系。 1
什么是设备像素比？ 1
如何还原设计图。1
px问题。 1
meta标签的一些作用？1
为什么有的网页在手机上能比例缩小？1
rem,em,vw,vh的区别?应用场景。1
postCss的用法？
1px像素问题。1
图片自适应问题。
背景图片问题。
img图片问题。
图片居中问题。
分辨率到底是什么？1
小屏幕和大屏幕如何适配。1
淘宝布局解决方案原理 1 略
水平垂直。居中问题

参考:https://www.zhihu.com/question/313971223/answer/628236155

css里边px到底是什么

px是viewport像素。
对于pc，viewport是不生效的，所以在pc上，px其实就是逻辑像素（chrome）
但是逻辑像素是与软件实现有关的，所以会出现一些问题。比如
在win上，对于部分国产马甲浏览器，viewport内部没有适配系统的缩放等级，导致渲染的内容过小

知乎即没有用媒体查询也没有用rem/em纯粹用px，流式布局,百分比。(任何设备上的px都是一样大小)

同样观看距离情况下，大屏看的更多而不是大屏看的更大的设计最佳实践来进行布局
所以等比缩放是不合理的(vw,vh,rem)都还是等比缩放的产物
px没有问题，用rem来实现自适应才有问题（因为它是vw，vm单位的备胎）,其实vw,vm也有同样的问题
只不过浏览器已经大规模兼容了。

用逻辑像素来进行布局，会是什么样的效果？
逻辑像素布局，就是大屏手机看的更多

随着每行字符的减小，行高一般也需要减小。比如pc1.5,那么台式1.3

什么时候使用vx，vxxx的布局方案我建议是，几乎不用，实际上
暂时为止，我也想不到什么场景是必须使用等比缩放的情况。
在更多的时候，我们应该使用flex或者定位配合百分比等方案来处理当然vx，
vxxx是可以无缝转换rem的项目的[width/100=1vw]，作为面向viewport和px不习惯或者不喜欢的朋友，
可以作为一个过渡方案就像flexible。 github废弃后大篇幅提供了vx，vxxx的兼容处理方案一样，
很多人也会误读，以为vx,vxxx是银弹

因为在大多数场景下，用户使用更大的屏幕，是想看到更多的内容，而不是更大的字。
所谓大多数场景，指的是除去以图片为主的纯展示，以及游戏等非主流的 Web 应用场景，在上述这些情况下使用 rem 甚至 vw 都无可厚非。
但是如果在常规的以文字信息为主的页面中也大量使用 rem 这种黑科技，只有两种情况：设计师或者前端偷懒，懒得去想如何适配不同的屏幕，直接缩放了事。
前端工程师还没有掌握 flex 等更优秀的布局方案。By the way，你们敢直视大量使用 rem 的页面在 PC 上的惨状吗？

rem方案的本质其实就是以设计稿的尺寸作为基准，并在其它尺寸的屏幕中对元素进行等比缩放！！！！！！！！！！


px 逻辑像素，vw,rem for 等比缩放


就px和rem，甚至说是em还是vw之类的单位，其实他们都是一样的，
只不过客户端对其渲染时计算的方式不一样，但客户端最终解析的值依旧是px



面向逻辑像素开发的基本开发流程
1. 在head 设置width=device-width的viewport
2. 在css中使用px
3. 在适当的场景使用flex布局，或者配合vw进行自适应
4. 在跨设备类型的时候（pc <-> 手机 <-> 平板）使用媒体查询
5. 在跨设备类型如果交互差异太大的情况，考虑分开项目开发

那么viewport width=device-width是什么意思?
其实就是让viewport的尺寸等于逻辑像素的尺寸

也就是当我们设置了width=device-width时 此时viewport像素等于逻辑像素！！！


为何要放弃使用flexible布局方案？
因为flexible是以rem来做布局的
而由于vw单位得到众多浏览器的兼容，
lib-flexible这个过渡方案已经可以放弃使用
不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用vw来替代此方案
问题:
rem 方案的本质其实就是以设计稿的尺寸作为基准，并在其它尺寸的屏幕中对元素进行等比缩放。
很显然，如果基准设置不合理，那么在较大或较小的屏幕上元素会显得过大或过小（这其中文字会更为明显）。
当然，我们也可以通过选择一个合适的中间值作为基准来缓解这种情况
，比如选用 iPhone 6/X 的 375px，但如此也只能是缓解，而无法做到尽善尽美。
尤其在当下，随着全面屏、折叠屏的兴起，市场上屏幕尺寸的差异会越来越大，这个问题将变得更加严重。
还有，如果项目中使用了一些第三方的 UI 组件，那么通常这些组件不会支持 rem，需要自己适配一下。
而相应的，rem 给我们带来的除提高开发效率之外的好处，比如实现宽高等比缩放，
往往也是可以通过其它技术（比如 vm/vh、cacl 等）很方便地实现的。
因此，可以说 rem 布局只是某个时期在某些特定环境下的产物而已
最终的主流，应该还是弹式布局及响应式布局

flex布局本身就可以创建能有效利用空间的适配布局!!!

vw与rem有着同样的问题。只不过用起来时更方便一些。

那么如果想在其他尺寸的设备上保持一致,那就需要设计出来多套代码，往往是设计师偷懒。
此时用（媒体查询+流式布局）一般并不会去改变字体大小。【极有可能在没有适配屏幕的情况下造成适配错乱】
因此还是会用rem或者vw

<meta name="viewport" content="width=device-width, initial-scale=1">时

meta标签 https://segmentfault.com/a/1190000004279791


总结

参考:https://www.zhihu.com/question/26195746

手机屏幕尺寸:
指的是设备对角线长度，单位为英寸


设备显示分辨率:
指的是屏幕(width*height)拥有的像素总数，单位为像素（pixel，简写px。设备信息里面的分辨率就是显示分辨率)

屏幕像素密度（PPI）:
假如两个手机的屏幕尺寸相同都为5英寸,显示分辨率为4×4 px 的屏幕显示质量大于显示分辨率为3×3 px 的屏幕。
结论: 屏幕尺寸相同，分辨率越高，屏幕像素密度越高,设备的显示质量越高,。

但是屏幕尺寸不同,分辨率也不同,如何比较屏幕像素密度呢？

PPI=√￣width2*height2/尺设备寸

视网膜屏幕(Retina)【高dpr的设备】
这是苹果公司提出的概念——当你拿的手机距离你25～30厘米时，如果手机PPI达到300以上,
肉眼将无法分辨出像素点。也就是说，当你拿的手机距离你25～30厘米时，手机PPI如果大于300,
此时肉眼所见的清晰度是一致的。


两倍屏的物理像素密度(ppi)是一倍屏的两倍，一个css像素对应4个物理像素



注意：我的mbp 初始分辨率 2560 x 1600 (227 ppi)
坑：mac=>查看本机=>显示器=>13.3英寸(2560 x 1600)   // 这个是render屏幕的分辨率 不能作为chrome 的px基准

如果要根据显示分辨率来开发页面，不能用此分辨率,应该在设置中搜索分辨率来查看默认的分辨率,此时才是正确的分辨率,和chrome中一致。

结论：视网膜屏分辨率不能作为开发页面的分辨率依据

逻辑像素【包含css像素】   css像素是逻辑像素的一种
显示像素【物理像素】

除了css像素是逻辑像素还有其他常见的逻辑像素吗？
我们平时描述一张图片宽高时一般用 200px * 100px(在css代码中描述)，这里的px也是逻辑像素,而图片属性中的宽高是显示像素


为什么屏幕尺寸相同而分辨率不同，为开发提供了极大的不便？

原因：因为分辨率的单位是px,前端的尺寸单位也是px(ios,android为pt)。
尺寸相同，而分辨率不同的手机比比皆是，那还开发个毛线啊

所以为了尽可能地减少开发人员的工作成本，开发人员需要一套统一的分辨率与尺寸单位。
由此衍生出一个新的分辨率——逻辑分辨率（单位是pt,android,ios）

逻辑分辨率  chrome控制台中手机显示的尺寸就是逻辑分辨率
！！！正常来说
设计师采用的是显示分辨率(px)
程序员开发时采用的是逻辑分辨率(pt),(前端页面还还是px)


为什么会有逻辑分辨率？
因为
1.目前的手机尺寸五花八门,相同尺寸的设备分辨率也会不同。
2.设备分辨率的单位为px,而前端开发设计图的尺寸也是px。
此时就会造成在相同尺寸,分辨率不同的设备无法写出一模一样的设计稿。逻辑分辨率应运而生。
根据逻辑分辨率开发的页面在浏览器(手机设备上会根据屏幕像素比转换成实际的显示分辨率,在系统内部你测量不到)
当然在不同尺寸下(比如iphonex,iphone6)如何还原设计图就需要em,rem,vm或者dpr来做转换了,来处理不同尺寸不同分辨率的设备。(px+流式布局也可以)


逻辑分辨率与显示分辨率如何转换？

 设备       显示分辨率(px)  转换率(屏幕像素比)   逻辑分辨率(pt)

 iPhone5s  640*1130       @2x               320*568
 iPhone6   750*1334       @2x               375*667
 iPhonex   1125*2463      @3x               375*812

iPhone的Plus系列例外 dpr为2点多 归为@3x

所以设计师肯可能会给你逻辑分辨率的尺寸，也可能会给你显示分辨率的尺寸

以iphone6的尺寸为基准
移动端
ps出图==>一般为为显示分辨率设计图==>前端实现时需要把设计图尺寸/2
Sketch/蓝狐出图==>一般为逻辑分辨率出图==>直接照着设计图标注实现就行

pc端
都是以显示分辨率来设计

为什么需要倍图？
@1x,@2x,@3x
因为图片只有显示分辨率的概念,并没有逻辑分辨率。所以需要按照转换率(屏幕像素比)来给图片尺寸。
给图片设置的尺寸是逻辑分辨率  而图片默认的尺寸是显示分辨率
倍图越大，尺寸越大，图片size越大

屏幕像素比算法：

显示分辨率/逻辑分辨率=屏幕像素比

例外:
MacBook采用视网膜显示屏
在mac上是render/显示分辨率(默认分辨率)= 2560/1440 约等于2 设计稿根据显示分辨率(默认分辨率)来设计
开发时也是根据显示分辨率来开发 和正常的pc端开发一样  张鑫旭
window.devicePixelRatio    pixel简写为px
媒体查询也能获取dpr,也能设置横竖屏适配

结论单单根据dpr来开发页面是不准确的

假如你的设计图是以逻辑分辨率为基准来开发 iPhone6 375*667

此时有一个图标为20*20px(逻辑像素) 那么切出来的图片应该是@2x 40*40px。这样才能在浏览器(设备)中运行时转换为显示分辨率(750*1334)

//前提是图片在一个固定发的容器当中时 才会这样
假如在dpr为2时使用了1倍图  那么在浏览器(设备)中运行转换为显示分辨率时图片就会变得模糊  一个像素点里面只能显示一个点(本来要显示4个点)
假如在dpr为2时使用了3倍图  那么在浏览器(设备)中运行转换为显示分辨率时图片就会失真     一个像素点里面显示4个点(本来要显示1个点)

手机设备上会根据屏幕像素比转换成实际的显示分辨率,在系统内部你测量不到

2K屏， 主流分辨率为2560x1440
4k屏，主流是3840x2160和4096×2160像素
电影视频网站内容常分为720p，960p，1080p等。720p：1280*720，960p：1280*960，1080p：1920*1080。
所以在一块像素点数量小于1920*1080的屏幕上，是无法100%显示1080p的视频文件的，除非是进行了缩放。


例如2560×1440px的屏幕，屏幕横向有2560个像素，纵向有1440个像素，结合PPI的含义，你应该明白分辨率不是物理尺寸的定义。
你可以有一个像你们家一面墙那么大的屏幕或者像你的脚趾盖那么大的一块屏幕，它们的分辨率都是可以是2560×1440px。

电脑的分辨率是可以调整的。会动态计算出来.相应的px尺寸也会更改!!!

27“Mac显示器有2560×1440px的点对点分辨率，109PPI。如果把屏幕分辨率调低，你就会发现屏幕上的窗口啊，icon啊啥的东西都变大了，
因为23.5英寸上的像素变少了(屏幕中的像素变少，其他的像素点会撑满整个屏幕,自然也就放大了),
可以想象成分辨率高时距离屏幕远，看到的像素多，分辨率低时距离屏幕近，显示的东西少。

其实像素还是那么多像素，PPI还是那个PPI，它们就在那里不多不少。
我说像素变少了的意思是当你把屏幕分辨率调低时，操作系统会通过拉伸来填充屏幕【这个时候CPU/GPU会用点对点的像素计算出来一套新的分辨率】。
如果你想把27”Mac的分辨率设为1280×720px，GPU就会把4个像素当成1个像素用（2×2）。这能咋的？当然是变糊了
这也就是分辨率高的屏幕上用分辨率低的图片，图片会模糊的原因！！！

前置知识：
电脑的分辨率是可以调整的。会动态计算出来.相应的px最大尺寸也会更改!!!。
举个例子：默认mbp的分辨率为1440 x 900 chrome中px最大尺寸为1440px 900px
若把分辨率更改为1680 x 1050 chrome中px最大尺寸就会变为1680px 1050px你也就能看到更多的页面内容

所以px与分辨率有密不可分的关系，而分辨率又分为显示分辨率和逻辑分辨率!!!
不信可以试试。

分辨率/尺寸

如何在大屏设备上做开发？

1.需要知道设备的默认分辨率(render分辨率不行)。
此时设计图根据此分辨率出图，也就相当于显示分辨率===逻辑分辨率(pc端的页面都是这样,因为dpr=1),
直接开发页面即可

2.只知道设备的尺寸,没有分辨率,如何开发页面？
不能开发页面。
因为页面px与尺寸无任何关系。尺寸相同分辨率不同的设备比比皆是。
除非是一些经典尺寸比如iphone6,此时还是需要拿到设备分辨率。
尺寸相同,分辨率不同的页面太多了

3.设置版心的原因。
px与分辨率有关。所以如果要适配屏幕基本上都会设置一个版心(980px)。防止在分辨率较小的尺寸上显示不全。

3.后台如何适配？

此时不能固定尺寸了。只能以流动性+响应式来适配。


rem应用场景，em应用场景
vw与vh区别:
less/scss 中如何写一个函数来处理rem ?


TODO: https://mp.weixin.qq.com/s/CJHeyjZhLxYNMqqacLsfHw


适配媒体查询:

/* 2倍屏 */
@media only screen and (-webkit-min-device-pixel-ratio: 2.0) {
    .border-bottom::after {
        transform: scaleY(0.5);
    }
}

/* 3倍屏 */
@media only screen and (-webkit-min-device-pixel-ratio: 3.0) {
    .border-bottom::after {
        transform: scaleY(0.33);
    }
}


垃圾回收机制
 https://mp.weixin.qq.com/s?__biz=MzI0NDQ0ODU3MA==&mid=2247493810&idx=2&sn=ea8e34f22deec53d115c373d798d8d0b&chksm=e95f04e7de288df1f9ef6ccb4877a271bab2ebc4618998b8643776b9ca7f7763ed02aaabcaa3&scene=132#wechat_redirect





chrome浏览器设置字体(小,中，大)
参考: https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/
对于em或rem来说
假如没有设置html的font-size大小 那么中号字体font-zie默认为16px,大号字体为24px
而可设置的最小字体为12px
因为rem相对于根元素 所以此时页面内的字体大小,盒尺寸会随着设置的字体大小而改变。
假如设置了html根元素的font-size的大小 那么改变浏览器设置的字体大小时，页面字体大小无效

对于em来说
em的font-size大小只和父级元素的font-size有关


rem总结
rem不论是设置盒模型尺寸还是设置font-size大小只和根元素(html)设置的font-size有关
/* 作用于根元素，相对于原始大小（16px），所以html的 font-size 为32px */
html {font-size: 2rem}

/* 作用于非根元素，相对于根元素字体大小，所以为64px */
p {font-size: 2rem}


em总结

em作用于font-size时是相对于父元素的font-size计算的
em作用于盒模型尺寸时是相对于自身font-size大小计算的代替
em设置的值可以用百分比来替换
浏览器默认的font-zize的大小(也就是根元素html字体的大小)与chrome浏览器设置字体(小,中，大)的大小有关，默认为16px ,大号字体为24px

em兼容性比rem好

场景总结

当设置的font-size大小不足12px时 会默认以12px显示


当根元素设置的font-size大小不足12px时 浏览器会默认以12px显示 那如果只用rem计算之后去布局那就会有问题
比如
 html{
  font-size:375/100px  // 3.75px
 }
那么此时

p {
    font-size:2rem  // 7.5px
}

或者没设置字体的元素也会以12px来显示
7.5px 不足12px 浏览器就会默认以12px来显示。但是一般不会有此问题(一般设计图的字体最小都为12px)
那如果html计算后的font-size为18px

那么默认字体就会以18px来显示  此时如果在pc端 没设置字体的元素为18px(因为继承了根元素) 此时就会有问题

vw尺寸有着与上述一样的问题

淘宝方案是把html的font-size设置为比12px大的一个值才解决的此问题





em场景总结

1.用于font-size,前提是得有基准字体。或者直接使用px
2.关于字体设置:

1.字体使用哪个尺寸都行
em是是相对于父元素,rem是相对于根元素 , px不变，vw相对于尺寸大小 看如何权衡利弊了。

2.专属于em的场景。

margin/padding/行高，text-indent 想根据字体元素大小而缩放时,margin/padding/行高可以使用em

下级标题是上级标题大小的1/4(标题嵌套缩放)  // 精通css65页


html font-size基准值做单位方案:

1.根据dpr来设置(类似于淘宝)【就是一直用px】
2.根据媒体查询来设置
2.em/px尺寸都行



流程
scss===> pr2rem(px) ===> 转换成rem ===> 更改html的font-size


<!-- vw与content="width=375"设置有关 假如width=300则1vw=3px -->
<!-- <meta name="viewport" content="width=device-width"> -->


排版容器
可视容器

1.viewport只是针对移动端浏览器来做的适配，与pc端无关 !!!

2.假设html中没有设置与viewport相关的任何属性,那么移动端浏览器就会自动把网页缩小,以使网页宽度符合屏幕宽度。
原因:此时页面只会被渲染到排版视窗中(默认一般为980px)
这也是为什么pc端网页在移动端页面下会等比例缩小的原因。
坑:当在移动端打开页面的时候，html的尺寸会有渲染错误的问题(一般为980px),但是页面还是会等比缩放。
此时设计师给出一套尺寸即可

3.当设置了viewport属性为具体值时

<meta name="viewport" content="width=375">


排版视窗是『可变的』 默认本来为980px 但是现在被改成了375px

可见视窗的大小是『固定的』,相当于每个设备的逻辑像素

网页被渲染到『排版视窗』===>然后等比缩放到『可见视窗』

假如 设置了content="width=375" 也就相当于iphone6的尺寸  也就是说逻辑像素为375px

有一个为187的div 那么此时div会占据375的一半,html的宽度不论在哪个设备中都是375px(某些大屏设备除外)。
只要是移动端的浏览器都是占据一半。但是会根据可见视窗[逻辑像素]来缩放。
意思就是假设此时的可见视窗(逻辑像素)为750px 那么375的容器会在750的容器中放大两倍来适应可见视窗(排版视窗)
假如设计师直接给你一个375的设计图直接改content="width=375"即可，也算是一种适配方案。


想象

排版容器为375     显示容器为 500    500要全屏容纳375  那么肯定会放大元素   此时逻辑像素为375

排版容器为375     显示容器为 200    200要全屏容纳375  那么肯定会缩小元素   此时逻辑像素也为375

那么也就是视口可以影响逻辑像素
设置视口大小===排版容器大小===逻辑像素大小
可视容器===原始的逻辑像素(排版像素)
逻辑像素大小===>最终转换为显示像素

与rem vw之间的区别:
视口设置在pc端是无效的


<meta name="viewport" content="width=device-width">
排版视窗的宽度与设备宽度(逻辑像素)一样,以适应不同设备的宽度


其他:

当在移动端时:px与viewport的设置有关  因为viewport间接与逻辑像素有关
当在pc端时:px与设备的分辨率有关。 因为此时显示像素===逻辑像素

所以也可以说px与逻辑像素有关  但是在移动端 viewport会改变逻辑像素。

为什么不直接设置content="width=375"?这样在不缩放的布局时岂不是更方便？

个人猜测:某些render或曲面屏或者ipad(移动端大屏)下
设置viewport会有问题，和rem的问题是差不多的



1.图片格式png,jpeg,webp,gif,base64

图片尺寸<容器,默认会平铺

图片尺寸>容器 ,默认从左上角显示，只显示一部分
若要居中可使用
background-position:50% 50%;


场景:背景图片居中，在较大的屏幕上覆盖整个容器，在较小的屏幕上图片的边缘会被切掉,如果屏幕特别大，元素边缘会出现空白
    height: 600px;
    width:100%;
    background-repeat: no-repeat;
    background-position: 50% 50%;
    /* 5120 × 3413 */
    background-image: url(./img2.jpg);



background-position:像素/rem/em
                    left/center/right  top/center/buttom
                    百分比
当使用像素/rem/em 图片的左上角是相对于元素的左上角来定位
当使用百分比
 x=(容器的宽度-图片的宽度)*百分比
 y=(容器的高度-图片的高度)*百分比
 然后再相对于容器左上角来定位

 所以图片在容器中居中 background-position:50%,50%===background-position:center,center;

 背景图片如何撑满全屏？
    body,html{
      height:100%
    }

background-size解析:
设置固定值
background-size:20px 100px;  假设20px 100px不是图片原始尺寸的比例，那么图片会变形。
把一个背景图片塞到宽20px,高100px设置百分比
background-size:100% 100%;  会因图片的高度与容器的高度不成比例而变形
百分比值是相对于容器大小,而不是相对于自身大小！！！
好的做法
只给一个纬度设置百分比(100% auto/auto 100%)，另一个纬度自动计算【此时如果图片比容器尺寸大自动计算的那一边仍然有被裁切的风险】
所以如果让图片随着元素缩放而缩放，必须使用百分比值
background-size:100% auto; 即会保持自己固有的宽高比，不会变形【图片会有被裁切的风险】

background-size:contain; 自动保持图片的宽高比，不会形变，不会被裁切，但是会出现空白。浏览器自动决定哪一边使用auto,哪一边使用100%。

容器的 宽度>高度 background-size:auto 100%; 高度使用100%,水平方向会出现空白
容器的 宽度<高度 background-size:100% auto; 宽度使用100%,垂直方向会出现空白


background-size:cover; 自动保持图片的宽高比，不会形变，图片会缩放，图片会被裁切，浏览器自动决定哪一边使用auto,哪一边使用100%【与containt相反】

容器的 宽度>高度 background-size:100% auto; 宽度使用100%,垂直方向会被裁切
容器的 宽度<高度 background-size:auto 100%; 高度使用100%,水平方向会被裁切


响应式背景图片:
    根据媒体查询不同的视口加载不同的背景图片
    根据媒体查询(不同分辨率下)加载不同的背景图片

然而img标签不能使用媒体查询

<img src='a.png' srcset='b.png 1.5x' />
srcset不同分辨率下加载不同图片,但是不能控制图片的尺寸

<img src='a.png' srcset='b.png ' sizes=''/>
sizes里面可以 指定图片宽度  浏览器根据网络环境/电量情况/分辨率自动去加载相应的图片


<picture>
  <source>
   <img />
  </source>
</picture>

source的属性与img属性一模一样,当浏览器不支持时会回退到img
source标签可写多个


应用场景

图片在不同屏幕上需要不同的裁切的方式【只使用srcset/sizes时图片的宽高比都相同】
可以在source上指定媒体查询来实现【指定多个source】

根据浏览器的支持情况加载不同宽度的图片

比如source标签上面使用abc.webp 图片的格式
如果浏览器不支持此格式 可以回退到img标签



设计图
倍图
显示像素 逻辑像素  排版容器 可视容器 dpr PPI
less scss
1px

适配
媒体查询 rem em vw vh wmin vmax
postcss postcss-pxtorem  postcss-to-viewport
flexible适配方案原理
图片适配
背景图适配
picture source

字体适配

小程序适配


适配
webview 尺寸转换  https://www.jianshu.com/p/0b639027a92b
 这里获取到的px值跟web中的px虽然单位一样，但并不是我们需要的值！！！Web所需的px实际为IOS中的pt值...，px转pt需要根据设备的ppi(Pixels Per Inch: 像素密度)进行转换：












